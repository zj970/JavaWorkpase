<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.xiaoxiangshop.dao.CategoryApplicationDao">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="net.xiaoxiangshop.entity.CategoryApplication">
	    <result column="id" property="id" />
	    <result column="version" property="version" />
        <result column="created_date" property="createdDate" />
        <result column="last_modified_date" property="lastModifiedDate" />
        <result column="rate" property="rate" />
        <result column="status" property="status" />
        <association property="store" select="net.xiaoxiangshop.dao.StoreDao.find" column="store_id" javaType="net.xiaoxiangshop.entity.Store" fetchType="lazy"/>
       	<association property="productCategory" select="net.xiaoxiangshop.dao.ProductCategoryDao.find" column="product_category_id" javaType="net.xiaoxiangshop.entity.ProductCategory" fetchType="lazy"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        categoryApplication.id,
        categoryApplication.version,
        categoryApplication.created_date, categoryApplication.last_modified_date, categoryApplication.rate, categoryApplication.status, product_category_id, store_id
    </sql>
	
	<!-- 查找实体对象 -->
	<select id="find" parameterType="java.lang.Long" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`category_application` categoryApplication
		WHERE
			`id` = #{id}
	</select>
	
	<!-- 查找实体对象集合 -->
	<select id="findSet" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`category_application` categoryApplication
		WHERE
			${attributeName} = #{attributeValue}
	</select>
	
	<!-- 查找商家提现数量 -->
	<select id="count" resultType="long">
		SELECT
			count(1)
		FROM
			`category_application` categoryApplication
		<where>
		  	<if test="status != null">
		  		AND `status` = #{status.ordinal}
		  	</if>
		  	<if test="store != null">
		  		AND `store_id` = #{store.id}
		  	</if>
		  	<if test="productCategory != null">
		  		AND `product_category_id` = #{productCategory.id}
		  	</if>
		</where>
	</select>
	
	<!-- 查找经营分类申请 -->
	<select id="findList" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`category_application` categoryApplication
		<where>
			<if test="store != null">
				AND `store_id` = #{store.id}
			</if>
			<if test="productCategory != null">
				AND `product_category_id` = #{productCategory.id}
			</if>
			<if test="status != null">
				AND `status` = #{status.ordinal}
			</if>
		</where>
	</select>
	
	<!-- 查找经营分类申请分页 -->
	<select id="findPage" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`category_application` categoryApplication
		LEFT JOIN `product_category` productCategory ON categoryApplication.product_category_id = productCategory.id
		LEFT JOIN `store` store ON store.id = categoryApplication.store_id
		<where>
			<if test="status != null">
				AND categoryApplication.status = #{status}
			</if>
			<if test="store != null">
				AND categoryApplication.store_id = #{store.id}
			</if>
			<if test="productCategory != null">
		  		AND categoryApplication.product_category_id = #{productCategory.id}
		  	</if>
		  	<if test="ew.nonEmptyOfWhere == true">
				AND
			</if>
			${ew.sqlSegment}
		</where>
	</select>
	
	<!-- 保存 -->
	<insert id="save" parameterType="net.xiaoxiangshop.entity.CategoryApplication">
    	INSERT INTO category_application(
			id ,
			created_date ,
			version ,
			rate ,
			`status` ,
			product_category_id ,
			store_id
		) VALUES (
			#{entity.id}, 
			#{entity.createdDate}, 
			#{entity.version}, 
			#{entity.rate}, 
			#{entity.status}, 
			#{entity.productCategory.id}, 
			#{entity.store.id}
		)
  	</insert>
  
  	<!-- 更新 -->
  	<update id="update" parameterType="net.xiaoxiangshop.entity.CategoryApplication">
   		UPDATE category_application
		SET last_modified_date = #{entity.lastModifiedDate},
			version = #{entity.version} + 1,
			rate = #{entity.rate},
			`status` = #{entity.status}
		WHERE
			id = #{entity.id}
		AND version = #{entity.version}
  	</update>
	
</mapper>
