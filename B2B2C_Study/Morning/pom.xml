<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<!-- 父项目的坐标:如果项目中没有规定某个元素的值,那么父项目中的对应值即为项目的默认值. 坐标包括group ID,artifact ID和 
		version. -->
	<modelVersion>4.0.0</modelVersion>								<!--声明项目描述符遵循哪一个POM模型版本.模型本身的版本很少改变,虽然如此,但它仍然是必不可少的,这是为了当Maven引入了新的特性或者其他模型变更的时候,确保稳定性. -->
	<groupId>org.pussinboots.morning</groupId>	    				<!--项目的全球唯一标识符,通常使用全限定的包名区分该项目和其他项目.并且构建时生成的路径也是由此生成, 如com.mycompany.app生成的相对路径为:/com/mycompany/app. -->
	<artifactId>morning-parent</artifactId>							<!--被继承的父项目的构件标识符. -->
	<version>3.0.0-SNAPSHOT</version>								<!--项目当前版本,格式为:主版本.次版本.增量版本-限定版本号. -->
	<packaging>pom</packaging>										<!--项目产生的构件类型,例如jar,war,ear,pom.插件可以创建他们自己的构件类型,所以前面列的不是全部构件类型. -->
	<name>morning</name>											<!--项目的名称,Maven产生的文档用. -->
	<url>http://maven.apache.org</url>     		  					<!--项目主页的URL,Maven产生的文档用. -->
	<description>morning  --  公益商城系统父模块</description>		<!--项目描述信息. -->

	<!-- 描述项目的子项目相对路径 -->
	<modules>
		<module>morning-common</module>
		<module>morning-order</module>
		<module>morning-user</module>
		<module>morning-product</module>
		<module>morning-administrator</module>
		<module>morning-online</module>
		<module>morning-system</module>
		<module>morning-cms-web</module>
		<module>morning-os-web</module>
		<module>morning-support</module>
	</modules>

	<!-- 项目属性 -->
	<properties>

		<!-- main version setting -->
		<junit.version>4.12</junit.version>
		<spring.version>4.3.7.RELEASE</spring.version>
		<mybatis.version>3.4.2</mybatis.version>
		<mybatis-spring.version>1.3.1</mybatis-spring.version>
		<mysql.driver.version>6.0.6</mysql.driver.version>
		<druid.version>1.0.29</druid.version>
		<log4j2.version>2.8.1</log4j2.version>
		<slf4j.version>1.7.25</slf4j.version>
		<shiro.version>1.3.2</shiro.version>
		<ehcache.version>3.3.0</ehcache.version>
		<spring-data-redis.version>1.8.1.RELEASE</spring-data-redis.version>
		<jedis.version>2.9.0</jedis.version>
		<dubbo.version>2.5.3</dubbo.version>
		<zkclient.version>0.10</zkclient.version>

		<!-- tools version setting -->
		<javax.servlet-api.version>4.0.0-b07</javax.servlet-api.version>
		<javax.servlet.jsp-api.version>2.3.1</javax.servlet.jsp-api.version>
		<jstl.version>1.2</jstl.version>
		<jackson-databind.version>2.8.7</jackson-databind.version>
		<fastjson.version>1.2.30</fastjson.version>
		<mybatis-plus.version>2.0.5</mybatis-plus.version>
		<springfox-swagger.version>2.6.1</springfox-swagger.version>
		<quartz.version>2.2.3</quartz.version>
		<kaptcha.version>2.3.2</kaptcha.version>
		<UserAgentUtils.version>1.20</UserAgentUtils.version>
		<commons-io.version>2.5</commons-io.version>
		<commons-fileupload.version>1.3.2</commons-fileupload.version>
		<bcprov-jdk15on.version>1.56</bcprov-jdk15on.version>
		<commons-codec.version>1.10</commons-codec.version>
		<commons-lang.version>2.6</commons-lang.version>
		<javax.mail-api.version>1.5.0-b01</javax.mail-api.version>
		<activation.version>1.1.1</activation.version>
		<velocity.version>1.7</velocity.version>
		<sitemesh.version>3.0.1</sitemesh.version>
		<commons-lang3.version>3.5</commons-lang3.version>

		<!-- plugins version setting -->
		<maven-compiler-plugin.version>3.6.1</maven-compiler-plugin.version>
		<maven-resources-plugin.version>3.0.2</maven-resources-plugin.version>
		<maven-war-plugin.version>2.6</maven-war-plugin.version>
		<maven-surefire-plugin.version>2.20</maven-surefire-plugin.version>

		<!-- environment version setting -->
		<jdk.version>1.8</jdk.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<morning.version>3.0.0-SNAPSHOT</morning.version>
		<package.environment>dev</package.environment>

	</properties>

	<!-- 设定主仓库，按设定顺序进行查找。 -->
	<repositories>
		<repository>
			<id>nexus-aliyun</id>
			<name>Nexus aliyun</name>
			<layout>default</layout>
			<url>http://maven.aliyun.com/nexus/content/groups/public</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
			</releases>
		</repository>
	</repositories>

	<!-- 设定插件仓库 -->
	<pluginRepositories>
		<pluginRepository>
			<id>nexus-aliyun</id>
			<name>Nexus aliyun</name>
			<url>http://maven.aliyun.com/nexus/content/groups/public</url>
		</pluginRepository>
	</pluginRepositories>

	<!-- dependencyManagement里只是声明依赖,并不实现引入,因此子项目需要显示的声明需要用的依赖. -->
	<dependencyManagement>
		<!-- 该元素描述了项目相关的所有依赖. 这些依赖组成了项目构建过程中的一个个环节.它们自动从项目定义的仓库中下载. -->
		<dependencies>
			<!-- 1.TEST:单元测试框架 begin√ -->
			<dependency>
				<groupId>junit</groupId>         		<!--依赖的group ID -->
				<artifactId>junit</artifactId>   		<!--依赖的artifact ID -->
				<version>${junit.version}</version> 	<!--依赖的版本号. 在Maven 2里, 也可以配置成版本号的范围. -->
				<scope>test</scope>			   			<!-- 依赖项的适用范围：test,只在测试时使用,用于编译和运行测试代码.不会随项目发布. -->
			</dependency>
			<!-- TEST end -->

			<!-- 2.SPRING相关依赖 begin√ -->
			<!-- ①.spring核心依赖 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>	<!--包含Spring框架基本的核心工具类 -->
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>	<!--springIoC（依赖注入）的基础实现 -->
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>	<!--spring 提供在基础 IoC 功能上的扩展服务 -->
				<version>${spring.version}</version>
			</dependency>

			<!-- ②.spring 持久层依赖 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>		<!--封装了spring对于事物的控制 -->
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>	<!--包含对Spring对JDBC数据访问进行封装的所有类 -->
				<version>${spring.version}</version>
			</dependency>

			<!-- ③.spring web相关依赖 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>		<!--包含Web应用开发时,用到Spring框架时所需的核心类,包括自动载入 WebApplicationContext 特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类 -->
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>	<!--Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架 -->
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aspects</artifactId> <!--提供对AspectJ的支持,以便可以方便的将面向方面的功能集成进IDE中 -->
				<version>${spring.version}</version>
			</dependency>
			<!-- ④.spring test依赖√ -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>	<!--与Junit单元测试、集成测试 -->
				<version>${spring.version}</version>
			</dependency>

			<!-- ⑤.spring 其它依赖 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>		<!--spring面向切面编程,提供AOP（面向切面编程） -->
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-oxm</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- SPRING相关依赖 end -->

			<!-- 3.SERVLET WEB begin√ -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId><!--j2ee web spec -->
				<version>${javax.servlet-api.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet.jsp</groupId>
				<artifactId>javax.servlet.jsp-api</artifactId>
				<version>${javax.servlet.jsp-api.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>			  <!--JSTL标签类 -->
				<version>${jstl.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId> <!--jackson json:高性能的JSON处理 -->
				<version>${jackson-databind.version}</version>
			</dependency>
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>fastjson</artifactId>		  <!-- 格式化对象,方便输出日志 -->
				<version>${fastjson.version}</version>
			</dependency>
			<!-- SERVLET WEB end -->

			<!-- 4.MYBATIS 持久层框架 begin√ -->
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis</artifactId>		  <!-- mybatis持久层框架 -->
				<version>${mybatis.version}</version>
			</dependency>
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis-spring</artifactId>
				<version>${mybatis-spring.version}</version>
			</dependency>
			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus</artifactId>	  <!-- mybatis-plus Mybatis增强辅助工具 -->
				<version>${mybatis-plus.version}</version>
			</dependency>
			<!-- MYBATIS 持久层框架 end -->

			<!-- 5.MYSQL 数据库相关依赖 begin -->
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId><!-- 导入Mysql数据库驱动包 -->
				<version>${mysql.driver.version}</version>
			</dependency>
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid</artifactId>              <!-- connection pool:数据库连接池,用来在spingMVC-mybatis.xml中配置数据库 -->
				<version>${druid.version}</version>
			</dependency>
			<!-- MYSQL 数据库相关依赖 end -->

			<!-- 6.LOG 日志相关依赖 begin√ -->
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-api</artifactId>			<!--核心log4j2jar包 -->
				<version>${log4j2.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-core</artifactId>
				<version>${log4j2.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-slf4j-impl</artifactId>   <!-- 桥接：告诉Slf4j使用Log4j2 -->
				<version>${log4j2.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-jcl</artifactId>  		<!-- 桥接：告诉commons logging使用Log4j2 -->
				<version>${log4j2.version}</version>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>			<!-- slf4j -->
				<version>${slf4j.version}</version>
			</dependency>
			<!-- LOG 日志相关依赖 end -->

			<!-- 7.安全框架SECURITY:shiro begin -->
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-core</artifactId>
				<version>${shiro.version}</version>
				<exclusions>
					<exclusion>
						<artifactId>slf4j-api</artifactId>
						<groupId>org.slf4j</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-spring</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-ehcache</artifactId>
				<version>${shiro.version}</version>
				<exclusions>
					<exclusion>
						<artifactId>slf4j-api</artifactId>
						<groupId>org.slf4j</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- 安全框架SECURITY:shiro end -->

			<!-- 8.缓存框架EHCACHE:ehcache begin -->
			<dependency>
				<groupId>org.ehcache</groupId>
				<artifactId>ehcache</artifactId>
				<version>${ehcache.version}</version>
			</dependency>
			<!-- 缓存框架EHCACHE:ehcache end -->

			<!-- 缓存框架REDIS:redis begin -->
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-redis</artifactId>
				<version>${spring-data-redis.version}</version>
			</dependency>
			<dependency>
				<groupId>redis.clients</groupId>
				<artifactId>jedis</artifactId> 					<!-- Java 客户端开发包 -->
				<version>${jedis.version}</version>
			</dependency>
			<!-- 缓存框架REDIS:redis end -->

			<!-- 9.分布式服务框架DUBBO:dubbo begin -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>dubbo</artifactId>
				<version>${dubbo.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.springframework</groupId>
						<artifactId>spring</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>com.101tec</groupId>
				<artifactId>zkclient</artifactId>
				<version>${zkclient.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-log4j12</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- 分布式服务框架DUBBO:dubbo ebd -->

			<!-- 10.其它组件: begin -->
			<!-- RESTful风格的Web服务框架SWAGGER2:swagger2 -->
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger2</artifactId>
				<version>${springfox-swagger.version}</version>
			</dependency>
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger-ui</artifactId>
				<version>${springfox-swagger.version}</version>
			</dependency>

			<!-- 任务调度框架QUARTZ:Quartz -->
			<dependency>
				<groupId>org.quartz-scheduler</groupId>
				<artifactId>quartz</artifactId>
				<version>${quartz.version}</version>
			</dependency>

			<!-- 验证码工具KAPTCHA:kaptcha -->
			<dependency>
				<groupId>com.github.penggle</groupId>
				<artifactId>kaptcha</artifactId>
				<version>${kaptcha.version}</version>
			</dependency>

			<!-- 获取User Agent用户代理:解析客户端操作系统、浏览器等 -->
			<dependency>
				<groupId>eu.bitwalker</groupId>
				<artifactId>UserAgentUtils</artifactId>
				<version>${UserAgentUtils.version}</version>
			</dependency>

			<!-- 上传组件包 -->
			<dependency>
				<groupId>commons-fileupload</groupId>
				<artifactId>commons-fileupload</artifactId>
				<version>${commons-fileupload.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>        <!-- Commons IO是针对开发IO流功能的工具类库. -->
				<version>${commons-io.version}</version>
			</dependency>

			<!-- RSA加密工具 -->
			<dependency>
				<groupId>org.bouncycastle</groupId>
				<artifactId>bcprov-jdk15on</artifactId>	   <!-- Bouncy Castle用于 Java 平台的开放源码的轻量级密码术包，它支持大量的密码术算法。 -->
				<version>${bcprov-jdk15on.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>	   <!-- Commons codec是项目中用来处理常用的编码方法的工具类包,例如DES、SHA1、MD5、Base64、URL、Soundx等等. -->
				<version>${commons-codec.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-lang</groupId>
				<artifactId>commons-lang</artifactId>
				<version>${commons-lang.version}</version>
			</dependency>

			<!-- JAVA mail 邮件发送 -->
			<dependency>
				<groupId>javax.mail</groupId>
				<artifactId>javax.mail-api</artifactId>
				<version>${javax.mail-api.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.activation</groupId>
				<artifactId>activation</artifactId>
				<version>1.1.1</version>
			</dependency>
			<dependency>
				<groupId>com.sun.mail</groupId>
				<artifactId>javax.mail</artifactId>
				<version>1.5.6</version>
			</dependency>

			<!-- 使用Velocity 模板引擎快速生成代码 -->
			<dependency>
				<groupId>org.apache.velocity</groupId>
				<artifactId>velocity</artifactId>
				<version>${velocity.version}</version>
			</dependency>

			<!-- 网页布局和修饰的框架包 -->
			<dependency>
				<groupId>org.sitemesh</groupId>
				<artifactId>sitemesh</artifactId>
				<version>${sitemesh.version}</version>
			</dependency>

			<!-- Commons项目中用来处理Java基本对象方法的工具类包√ -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>

			<dependency>
				<groupId>com.qiniu</groupId>
				<artifactId>qiniu-java-sdk</artifactId>
				<version>7.2.6</version>
			</dependency>

			<dependency>
				<groupId>com.aliyun.oss</groupId>
				<artifactId>aliyun-sdk-oss</artifactId>
				<version>2.7.0</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<!-- 构建项目需要的信息 -->
	<build>
		<!-- 产生的构件的文件名,默认值是${artifactId}-${version} . -->
		<finalName>morning</finalName>
		<plugins>
			<!-- maven-compiler-plugin:编译插件(maven-compiler-plugin用来编译Java代码) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<!-- 源代码使用的开发版本 -->
					<source>${jdk.version}</source>
					<!-- 需要生成的目标class文件的编译版本 -->
					<target>${jdk.version}</target>
					<!-- 一般而言,target与source是保持一致的,但是,有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk,源代码中需要没有使用低版本jdk中不支持的语法),会存在target不同于source的情况 -->
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- maven-assembly-plugin:处理资源 (maven-resources-plugin则用来处理资源文件.默认的主资源文件目录是src/main/resources,很多用户会需要添加额外的资源文件目录,这个时候就可以通过配置maven-resources-plugin来实现.) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin.version}</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- maven-surefire-plugin:不执行测试用例，也不编译测试用例类。 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					<skip>true</skip>
					<testFailureIgnore>true</testFailureIgnore>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- 开发者信息 -->
	<developers>
		<developer>
			<name>ChenXingXing</name>
			<id>XingXing.Chen</id>
			<email>chenxingxing1994@foxmail.com</email>
			<roles>
				<role>Developer</role>
			</roles>
			<timezone>+8</timezone>
		</developer>
	</developers>
</project>